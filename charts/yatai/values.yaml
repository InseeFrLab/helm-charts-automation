# Default values for yatai.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
security:
  username: ""
  email: ""
  password: ""
  networkPolicy:
    enabled: true
    from: []
  allowlist:
    enabled: true
    ip: "0.0.0.0/0"


image:
  yatai:
    repository: aminehub/yatai
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.1.3.v2"
  yataiDeployment:
    repository: quay.io/bentoml/yatai-deployment
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.1.3"
  yataiImageBuilder:
    repository: aminehub/yatai-image-builder
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.1.3.1"

service:
  type: ClusterIP
  port: 80

internalImages:
  debugger: quay.io/bentoml/bento-debugger:0.0.7
  metricsTransformer: quay.io/bentoml/yatai-bento-metrics-transformer:0.0.3
  kaniko: gcr.io/kaniko-project/executor@sha256:23ae6ccaba2b0f599966dbc5ecf38aa4404f4cd799add224167eaf285696551a
  bentoDownloader: quay.io/bentoml/bento-downloader:0.0.1
  buildkit: quay.io/bentoml/buildkit:master
  buildkitRootless: quay.io/bentoml/buildkit:master-rootless

############# postgresql #############

global:
  postgresql:
    auth:
      postgresPassword: "changeme"
      database: "yatai"

postgresql:
  image:
    tag: "12"
  fullnameOverride: "yatai-postgresql"

############# yatai #############

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

configFileContent:
  # You can put your config.yaml content here. This is the configuration of the Yatai api-server, example content you can find here: https://github.com/bentoml/Yatai/blob/main/yatai-config.sample.yaml

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  className: ''
  enabled: true
  path: "/"
  host: "example.chart.io"

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

s3:
  endpoint: ''
  region: ''
  bucketName: ''
  secure: true
  accessKey: ''
  secretKey: ''
  accessKeyExistingSecretName: ''
  aceessKeyExistingSecretKey: 'access_key'
  secretKeyExistingSecretName: ''
  secretKeyExistingSecretKey: 'secret_key'

enableHostTimeZone: false

transmissionStrategy: proxy
doNotTrack: true



############# yatai-deployment #############
defaultDomainImage:
  repository: quay.io/bentoml/yatai-default-domain
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.0.2"



yataiDeploymentPodSecurityContext:
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

yataiDeploymentSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL


layers:
  network:
    ingressClass: 'nginx'
    ingressAnnotations: {}

    ingressPath: /
    ingressPathType: ImplementationSpecific

    # To configure DNS for Yatai BentoDeployment, take an External IP or CNAME from setting up networking, and configure it with your DNS provider as follows:
    #   If the networking layer produced an External IP address, then configure a wildcard `A` record for the domain:
    #       ```
    #       # Here yatai.example.com is the domain suffix for your cluster
    #       *.yatai.example.com == A 10.0.0.1
    #       ```
    #   If the networking layer produced a `CNAME`, then configure a CNAME record for the domain:
    #       ```
    #       # Here yatai.example.com is the domain suffix for your cluster
    #       *.yatai.example.com == CNAME a317a278525d111e89f272a164fd35fb-1510370581.eu-central-1.elb.amazonaws.com
    #       ```
    #   Then set `yatai.example.com` as domainSuffix field here. If you don't set it, Yatai will automatically generate a domain suffix for your bento deployment.
    domainSuffix: ''

    automaticDomainSuffixGeneration: false

disableAutomateBentoImageBuilder: false
enableRestrictedSecurityContext: false

############# yatai-image-builder #############


dockerRegistry:
  server: 'https://index.docker.io/v1/'
  inClusterServer: ''
  username: ''
  password: 'd'
  mail: ""
  passwordExistingSecretName: ''
  passwordExistingSecretKey: ''
  secure: true
  bentoRepositoryName: ""
  useAWSECRWithIAMRole: false
  awsECRRegion: ap-northeast-3

aws:
  accessKeyID: ''
  secretAccessKey: ''
  secretAccessKeyExistingSecretName: ''
  secretAccessKeyExistingSecretKey: ''
  endpoint: ''
  region: ''
  bucketName: ''

bentoImageBuildEngine: kaniko # options: kaniko, buildkit, buildkit-rootless
